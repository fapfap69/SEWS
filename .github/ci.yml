name: SWSWS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Esegui ogni luned√¨ alle 2 AM

env:
  BUILD_TYPE: Release

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format-12 valgrind

    - name: Code formatting check
      run: |
        find src tests -name '*.c' -o -name '*.h' | xargs clang-format-12 --dry-run -Werror

    - name: Static analysis
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 ./src/

    - name: Check for memory leaks
      run: |
        make
        valgrind --leak-check=full --error-exitcode=1 ./swsws --test-mode

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'SWSWS'
        path: '.'
        format: 'HTML'

    - name: Upload security scan results
      uses: actions/upload-artifact@v2
      with:
        name: dependency-check-report
        path: dependency-check-report.html

  build-and-test:
    needs: [code-quality]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install openssl
        fi

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Run coverage analysis
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y lcov
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.info

  deploy:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: |
          your-dockerhub-username/swsws:latest
          your-dockerhub-username/swsws:${{ github.sha }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/swsws
        asset_name: swsws
        asset_content_type: application/octet-stream


